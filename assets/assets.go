// Code generated by go-bindata. DO NOT EDIT.
// sources:
// res/Skype.lnk (1.391kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _skypeLnk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x93\x41\x88\x1b\x65\x14\xc7\x7f\xa9\xdb\xda\x52\xc1\x14\xeb\x62\x41\xd9\xc1\x4a\xd9\xb6\xce\x34\x33\x49\xd3\x49\x8a\x10\x4d\x9a\x4d\x4d\x42\x87\x46\xa5\xea\x14\x5c\xe2\xa4\x0d\x49\x98\x64\x26\x42\xa2\x52\x04\x11\x61\xb5\x7a\xf0\x60\x0f\x4a\x82\x08\x8a\xe0\x41\x10\x44\x2d\x52\x51\xd1\x8b\x5a\x21\x05\xb5\x0a\x6d\xbd\x48\xad\x54\xf4\x20\xb8\x7b\x90\xef\xcb\x6c\x76\xb3\xbb\xe0\x5e\x7c\x03\x33\xc3\xf7\xde\xf7\x7f\xff\xf7\x7f\xef\x15\x80\xd0\xf6\x0d\x08\x3b\x27\xdf\x64\x7b\x80\x02\xfc\x3c\xb7\x33\x72\xf3\xf1\x41\x48\xcd\xce\xe8\xe2\xcb\x67\xf3\x1f\xec\x3c\x3c\x08\xa5\xfe\xf8\x5b\x5e\x08\x31\x6e\xbf\x85\xb6\x33\x65\x5d\x3a\x72\x5e\xb9\x9a\xac\x86\xdf\xf8\x7e\x33\x7b\x23\x91\xd7\x77\xb0\x2f\x9d\xb4\x59\x6d\x67\xd0\x87\xf9\x8a\x3f\x6c\xda\x86\x75\xf4\xc8\xcc\xd1\x7b\x4f\x19\xf0\x0c\x5b\x98\xe0\xfa\x27\x2f\x14\xbe\x3c\x2b\x7c\x9a\xa0\x16\xbd\x11\xd8\x3a\xba\xfb\xd0\x10\xa1\x35\x89\x85\x87\xcb\x09\x3c\x66\x69\xa0\x90\xa5\x4a\x1d\x07\x1f\x85\x69\x3a\x98\xc4\xd9\x0d\xa4\xf0\x39\x89\x43\x9d\x3a\x51\x0c\x34\x1e\x97\xff\x77\xa3\x62\xa0\x63\xa2\x73\x00\xb8\x0d\x7b\x19\xaf\x30\xc5\xc3\x87\x0e\xc4\x32\xa7\x74\xc8\x04\xbc\xc4\xf9\x22\xaf\x8f\x6e\x12\x91\x8d\x95\x95\xb5\x26\x29\x52\xa5\x2c\xb9\xf9\xb8\x54\x68\x4b\xec\xfa\x08\xfb\xe2\xa6\x30\xa5\xfc\xc3\xd6\xa1\xac\xc0\x7e\x60\x0c\xfb\xa2\xc4\xfe\x5a\x62\x27\xf6\x8e\x63\x5f\x33\xb3\x94\xa8\xd1\xa5\x89\x83\x42\x05\x17\x0f\x85\x8c\xac\xb9\x46\x1b\x97\x66\x50\x87\x81\x68\xd5\x9e\xe2\xef\xcf\x2a\x94\x6a\xdd\xa6\xa3\x39\x1d\x67\x59\x1d\x3f\x8e\x72\xa9\xb7\x0a\xec\x4f\x37\xac\xee\xd2\x52\x2e\x0d\x87\x0e\x8e\xc4\x06\x1f\xb8\x3d\x18\x02\xf1\xdd\x1f\xc4\x7b\xc0\x0e\xe0\x06\x20\x3e\xf3\xcb\x44\x18\xc8\x54\xef\x6a\x3d\xe1\x28\x69\xd2\x49\xdb\xf2\xdc\x13\xde\x6c\x43\xc9\x56\xeb\x8e\xaf\x4c\x77\xcc\xf8\x6e\xbb\x58\x2d\x7b\xae\xef\x56\xda\xb6\x64\xa9\x54\x5c\x4f\xc9\x38\x7e\xad\xed\x36\xed\x25\xde\x6c\x5c\x46\xe6\x3e\x34\x34\xec\xb1\xf7\xfa\x46\xc1\x5e\xa3\x35\xf6\x3a\x24\xb5\xd7\x90\xc2\x20\x4d\xf2\x7f\xcf\x2c\x24\xdc\x08\xfd\x3d\xc0\x17\x81\xdc\x5b\xa1\x7f\x3d\xf5\xc8\xd3\xf3\xfd\x85\xfc\xf3\xf7\x9f\xfb\xf3\xd2\x87\xff\xbc\x24\x7c\x8f\x0d\xa5\xef\x1f\x0b\xda\x51\xf6\x66\x9f\xec\xaa\xcd\xf2\x62\x3b\x5f\xf3\xef\x9c\xff\xfc\xca\xf1\xfc\x3b\xaf\xc6\x77\x1d\xbc\x6a\xf5\xbe\x1d\x5c\xf8\xee\xa7\xaf\x7e\xdd\xf6\xdc\xcb\x99\xb9\x47\x1b\xef\x5f\xfb\x2f\xff\xc1\x10\x6c\x81\xfe\x69\x40\x2f\x59\xa5\x2b\x73\xc7\xb2\x67\x0b\x66\xfa\xe3\x85\x5b\x5e\xd9\x75\xa6\xf1\x4d\x0b\x98\x10\x89\xa6\x80\x7d\x72\x7e\x54\x74\x54\xf6\x07\x7b\xa6\x12\x25\x4a\x84\x38\x51\xb9\x73\x06\x31\x0c\x54\x62\x44\xe4\x63\x4a\x4f\x8c\xb8\x8c\xd5\x89\x61\x62\x60\x12\xc1\x90\x4f\x42\x9e\x8a\x48\x7d\x34\xa3\xd5\x80\xcc\x83\xd3\x85\x5e\xb7\x97\xc8\xbf\x7d\xfe\xf2\x40\xbd\x7c\xe1\xaf\xe2\x50\x38\xd8\x0c\x24\x61\x0d\xfd\xb5\xb1\xae\x2e\xfd\xaf\x5c\xa7\xa1\x25\x82\x44\xef\x4d\x36\x32\xef\x9e\x6e\xe6\xde\xca\xa5\xb4\x37\xef\xe9\xbc\x78\x07\x70\x52\x04\xe4\x84\xfc\x4f\xe5\x73\xc3\x70\x6b\x6a\xe5\x36\xfd\x1b\x00\x00\xff\xff\xa2\x76\x8e\x28\x6f\x05\x00\x00")

func skypeLnkBytes() ([]byte, error) {
	return bindataRead(
		_skypeLnk,
		"Skype.lnk",
	)
}

func skypeLnk() (*asset, error) {
	bytes, err := skypeLnkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Skype.lnk", size: 1391, mode: os.FileMode(0666), modTime: time.Unix(1538787296, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf6, 0xfa, 0xbe, 0xcc, 0x84, 0x7e, 0x2f, 0x68, 0xa5, 0x85, 0xbf, 0xbc, 0x4b, 0xa1, 0x4b, 0xc3, 0xa5, 0x95, 0x71, 0x70, 0x7c, 0x41, 0x61, 0x8c, 0x3d, 0xd0, 0x3a, 0xcd, 0xed, 0x36, 0x3d, 0x78}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"Skype.lnk": skypeLnk,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"Skype.lnk": &bintree{skypeLnk, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
